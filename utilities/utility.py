import hashlib
import secrets
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from tinyec.ec import Inf


def derive_shared_secret(pvt_key: int, pub_key: Inf):
    """
    Derives the shared secret between a private key
    and another host's public key by performing ECC point
    multiplication

    @param pvt_key:
        An owning host's private key

    @param pub_key:
        The other host's public key

    @return: shared_secret
        The result of pvt_key * pub_key
    """
    return pvt_key * pub_key


def compress(key):
    """
    Compresses a key generated by ECDH key
    exchange protocol into a hex representation
    of 65 hex digits.

    @param key:
        The key to be compressed

    @return: Compressed Key
        A compressed key represented as a hex string
    """
    return hex(key.x) + hex(key.y % 2)[2:]


def compress_shared_secret(shared_secret: Inf):
    """
    Compresses the shared secret (derived from ECDH key exchange)
    into 32 bytes (256 bits) suitable for AES using SHA-256.

    @param shared_secret:
        An Inf object that represents the shared secret

    @return: compressed_key
        A SHA256 hash of the shared secret (32 Bytes)
    """
    # Serialize the coordinates of the shared secret (x, y) into bytes
    serialized_secret_key = shared_secret.x.to_bytes(32, 'big') + shared_secret.y.to_bytes(32, 'big')
    compressed_key = hashlib.sha256(serialized_secret_key).digest()
    return compressed_key


def encrypt(plain_text: bytes, key: bytes):
    """
    Uses an AES cipher to encrypt plaintext with a 32-byte
    shared secret key derived from ECDH.

    @param plain_text:
        An array of bytes containing data of the plain text
        to be encrypted

    @param key:
        Bytes of the shared secret key

    @return: cipher_text, cipher.IV
        The encrypted cipher text and the initialization vector (IV)
    """
    cipher = AES.new(key, mode=AES.MODE_CBC, iv=secrets.token_bytes(16))
    ciphertext = cipher.encrypt(pad(plain_text, AES.block_size))  # Default padding with PKCS7
    return ciphertext, cipher.IV


def decrypt(cipher_text: bytes, key: bytes, IV: bytes):
    """
    Uses an AES cipher to decrypt ciphertext with a 32-byte
    shared secret key derived from ECDH.

    @param cipher_text:
        An array of bytes containing encrypted data

    @param key:
        Bytes of the shared secret key

    @param IV:
        An initialization vector for AES cipher

    @return: plain_text
        An array of bytes containing decrypted data
    """
    cipher = AES.new(key, AES.MODE_CBC, IV)
    plain_text = unpad(cipher.decrypt(cipher_text), AES.block_size)
    return plain_text
