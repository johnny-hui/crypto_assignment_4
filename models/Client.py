import secrets
import select
import sys

from utilities.constants import INPUT_PROMPT, MIN_MENU_ITEM_VALUE, MAX_MENU_ITEM_VALUE, INIT_CLIENT_MSG, \
    INIT_SUCCESS_MSG, MODE_CLIENT
from utilities.init import parse_arguments, initialize_socket, generate_keys
from utilities.utility import display_menu, get_user_menu_option, send_message, connect_to_server


class Client:
    """A class representing the client

    Attributes:
        name - The name of the client
        ip - The ip address
        port - The port number
        own_socket - The socket object for the client
        server_socket - The socket object for the server
        pvt_key - The private key generated by ECDH (via. brainpoolP256r1)
        pub_key - The public key generated by ECDH (via. brainpoolP256r1)
        sockets - A list of sockets to monitor (for select() function)
        shared_secret - The shared secret with the server (generated by ECDH key exchange)
        is_connected = A boolean indicating if the client is connected
    """
    def __init__(self):
        print(INIT_CLIENT_MSG)
        self.name, self.ip, self.port = parse_arguments()
        self.own_socket = initialize_socket(self.ip, self.port)
        self.pvt_key, self.pub_key = generate_keys(mode=MODE_CLIENT)
        self.iv = secrets.token_bytes(16)
        self.sockets = [self.own_socket, sys.stdin]
        self.server_socket = None
        self.shared_secret = None
        self.is_connected = False
        print(INIT_SUCCESS_MSG)

    def start(self):
        print("=" * 80)
        display_menu(self.is_connected, is_server=False)
        print(INPUT_PROMPT)

        while True:
            readable, _, _ = select.select(self.sockets, [], [])

            for fd in readable:
                # a) Get User Command from the Menu
                if fd == sys.stdin:
                    command = get_user_menu_option(fd, MIN_MENU_ITEM_VALUE, MAX_MENU_ITEM_VALUE)

                    if command == 1:
                        if self.is_connected:
                            send_message(self.server_socket)
                        else:
                            connect_to_server(self)

                    if command == 2:
                        print("PLACEHOLDER")

                    if command == 3:
                        print("PLACEHOLDER")

                    display_menu(self.is_connected)
                    print(INPUT_PROMPT)

                # b) Handle new connection
                elif fd == self.own_socket:
                    client_socket, client_address = self.own_socket.accept()
                    self.sockets.append(client_socket)
                    print("[+] A new connection from ({}, {})!".format(client_address[0], client_address[1]))

                # c) Receive data from server
                else:
                    data = fd.recv(1024)
                    if data:
                        print("[+] Received data: ", data.decode())
                    else:
                        print("[+] Connection closed by server: ", fd.getpeername())
                        self.sockets.remove(fd)
                        fd.close()
