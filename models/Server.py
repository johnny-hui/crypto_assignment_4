import select

from utilities.constants import INIT_SERVER_MSG, INIT_SUCCESS_MSG, MODE_SERVER, INPUT_PROMPT
from utilities.init import parse_arguments, initialize_socket, generate_keys
from utilities.utility import accept_new_connection_handler, display_menu, receive_data


class Server:
    """A class representing the server

    @attention: Design Decision
        Server cannot connect to other clients or servers
        (only accept connections)

    Attributes:
        ip - The ip address
        port - The port number
        name - The name of the server
        own_socket - The socket object for the server
        pvt_key - The private key generated by ECDH (via. brainpoolP256r1)
        pub_key - The public key generated by ECDH (via. brainpoolP256r1)
        fd_list - A list of file descriptors to monitor (using select() function)
        client_dict - A dictionary containing information about each connected client{IP: (name, shared secret key, IV)}
        terminate - A boolean flag that determines if the server should terminate
    """
    def __init__(self):
        """
        A constructor for a Server class object.
        """
        print(INIT_SERVER_MSG)
        self.name, self.ip, self.port = parse_arguments()
        self.own_socket = initialize_socket(self.ip, self.port)
        self.pvt_key, self.pub_key = generate_keys(mode=MODE_SERVER)
        self.fd_list = [self.own_socket]  # => Monitored by select()
        self.client_dict = {}  # Format {IP: [name, shared_secret, IV]}
        self.terminate = False
        print(INIT_SUCCESS_MSG)

    def start(self):
        """
        Starts the server and monitors any incoming connections
        and messages from existing clients.

        @return: None
        """
        print("=" * 80)
        display_menu(is_server=True)
        print(INPUT_PROMPT)

        while self.terminate is False:
            readable, _, _ = select.select(self.fd_list, [], [])

            for sock in readable:
                if sock is self.own_socket:
                    accept_new_connection_handler(self, sock)
                else:
                    receive_data(self, sock, is_server=True)
